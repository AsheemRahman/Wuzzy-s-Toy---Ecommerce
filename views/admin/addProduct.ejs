<style>
    .container-add-products {
        width: 100%;
        background-color: #232323;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 37px;
        margin-top: 40px;
        color: #fefeeb
    }

    .add-products {
        height: 80%;
        background-color: #232323;
        border-radius: 10px;
        padding: 20px;
        margin: 10px;
    }

    textarea {
        height: 250px;
        overflow: hidden;
        resize: none;
    }

    .add-product-img {
        background: #DB4444;
        color: #fefeeb;
        padding: 10px;
        border-radius: 10px;
        cursor: pointer;
    }

    .add-product-img:hover {
        background: #f55;
    }

    .form-control {
        background: #232323;
        color: #fefeeb;
    }

    .form-control:focus {
        color: #fefeeb;
        background: #232323;
    }

    input:-webkit-autofill,
    input:-webkit-autofill:hover,
    input:-webkit-autofill:focus {
        -webkit-text-fill-color: #fff;
        transition: background-color 5000s ease-in-out 0s;
    }

    /*---------- inale add akiyath -------*/

    .product-form-top {
        display: flex;
        flex-direction: row;
        margin-bottom: 3rem;
        flex-wrap: wrap;

    }

    .product-form-bottom {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        gap: 3rem;

    }

    .product-form-left {
        display: flex;
        flex-direction: column;
        width: 50%;
        margin-top: 3rem;
        align-items: center;
    }

    .product-form-right {
        display: flex;
        flex-direction: column;
        width: 50%;
        margin-top: 3rem;
        align-items: center;
    }

    .product-form-left input,
    .product-form-right input {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        border-radius: 10px;
        width: 90%;
        margin-bottom: 1rem;
    }

    .product-form-left label,
    .product-form-right label {
        width: 90%;
    }



    #product-image-preview {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 90%;
    }

    /* ulath ^ */

    .product-image-box {
        display: flex;
        flex-direction: column;
        border: 1px solid #c5c5c5;
        border-radius: 10px;
        overflow: hidden;

    }

    .preview-img {
        width: 200px;
        height: 200px;
        object-fit: scale-down;
    }

    .delete-button {
        background-color: #c30606;
        padding: 10px;
        color: #ffffff;
        font-weight: 600;
        border: none;
        outline: none;
    }

    .btn {
        min-width: 150px;
    }


    #cropper-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    #cropper-container {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #cropper-image {
        max-width: 100%;
        max-height: 70vh;
    }

    #cropper-buttons {
        margin-top: 1rem;
        display: flex;
        gap: 1rem;
    }
</style>



<%- include('navbar') %>

    <!-------------------------------------- product add ---------------------------------------------->

    <div class="container container-add-products">
        <div class="add-products">
            <form action="/admin/addproduct" method="post" enctype="multipart/form-data" id="add-product-form">
                <div class="row d-flex justify-content-center align-content-center ">
                    <div class="col-6">
                        <label class="form-label " for="productName">Product Name</label>
                        <input class="form-control form-input " type="text" name="productName" id="productName"
                            required>
                        <label class="form-label " for="productPrice">Price</label>
                        <input class="form-control form-input" type="text" name="productPrice" id="productPrice"
                            required>

                        <div>
                            <label class="form-label " for="productCollection">Collection</label>
                            <select name="productCollection" id="productCollection" class="form-control form-input"
                                required>
                                <option value="" selected disabled>Select a category</option>
                                <% productCollection.forEach((collection)=> { %>
                                    <option value="<%= collection.collectionName %>">
                                        <%= collection.collectionName %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>

                        <label class="form-label " for="productQuantity">Stock</label>
                        <input class="form-control form-input" type="text" name="productQuantity" id="productQuantity"
                            required>
                    </div>

                    <div class="col-6">
                        <label for="productDescription" class="form-label">Description</label>
                        <textarea class="form-control form-input" name="productDescription" id="productDescription"
                            required></textarea>
                    </div>

                    <form action="/admin/add-product" method="post" enctype="multipart/form-data" id="add-product-form">
                        <div class="product-form-top">
                            <div class="product-form-left"></div>
                            <div class="product-form-right"></div>
                        </div>
                        <div class="product-form-bottom">
                            <input type="file" id="product-image-upload" name="productImage"
                                accept="image/png, image/jpeg" multiple class="d-none">
                            <label for="product-image-upload" class="btn btn-warning">
                                <i class="fas fa-upload"></i> &nbsp; Choose Images
                            </label>
                            <div id="product-image-preview"></div>
                            <div>
                                <a href="/admin/product" class="btn btn-secondary">Cancel</a>
                                <button class="btn btn-success" type="submit">Add Product</button>
                            </div>
                        </div>
                    </form>
                    <div id="cropper-modal">
                        <div id="cropper-container">
                            <img id="cropper-image">
                            <div id="cropper-buttons">
                                <button id="crop-cancel" class="btn btn-secondary">Cancel</button>
                                <button id="crop-confirm" class="btn btn-primary">Crop</button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>



    <script>
        const addProductForm = document.getElementById('add-product-form');
        const productImageUpload = document.getElementById('product-image-upload');
        const productImagePreview = document.getElementById('product-image-preview');
        const cropperModal = document.getElementById('cropper-modal');
        const cropperImage = document.getElementById('cropper-image');
        const cropCancel = document.getElementById('crop-cancel');
        const cropConfirm = document.getElementById('crop-confirm');
        let cropper;
        let files = [];
        let currentFileIndex;

        productImageUpload.addEventListener('change', () => {
            productImagePreview.innerHTML = '';
            files = Array.from(productImageUpload.files);
            if (files.length > 4) {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Maximum file count is 4",
                });
                productImageUpload.value = '';
                files = [];
                return;
            }
            if (files.length === 0) {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Minimum file count is 1",
                });
                productImageUpload.value = '';
                files = [];
                return;
            }
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const imgElement = document.createElement('img');
                    imgElement.src = e.target.result;
                    imgElement.classList.add('preview-img');
                    imgElement.dataset.index = index; // Add data attribute to track index
                    const imageBox = document.createElement('div');
                    imageBox.classList.add('product-image-box');
                    imageBox.appendChild(imgElement);
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.classList.add('delete-button');
                    deleteButton.addEventListener('click', () => {
                        files.splice(index, 1);
                        imageBox.remove();
                        updateImagePreviews(); // Update previews after deletion
                    });
                    imageBox.appendChild(deleteButton);
                    productImagePreview.appendChild(imageBox);

                    imgElement.addEventListener('click', () => {
                        cropperImage.src = e.target.result;
                        cropperModal.style.display = 'flex';
                        cropper = new Cropper(cropperImage, {
                            aspectRatio: 0,
                            viewMode: 0,
                            autoCropArea: 1
                        });
                        currentFileIndex = index;
                        console.log('Current file index set to:', currentFileIndex); // Log current file index
                    });
                };
                reader.readAsDataURL(file);
            });
        });

        cropCancel.addEventListener('click', () => {
            cropperModal.style.display = 'none';
            cropper.destroy();
        });

        cropConfirm.addEventListener('click', () => {
            const canvas = cropper.getCroppedCanvas();
            canvas.toBlob((blob) => {
                const croppedFile = new File([blob], files[currentFileIndex].name, { type: 'image/jpeg' });
                files[currentFileIndex] = croppedFile;
                updateImagePreviews(); // Update previews after cropping
                cropperModal.style.display = 'none';
                cropper.destroy();
            });
        });

        function updateImagePreviews() {
            productImagePreview.innerHTML = '';
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const imgElement = document.createElement('img');
                    imgElement.src = e.target.result;
                    imgElement.classList.add('preview-img');
                    imgElement.dataset.index = index; // Add data attribute to track index
                    const imageBox = document.createElement('div');
                    imageBox.classList.add('product-image-box');
                    imageBox.appendChild(imgElement);
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.classList.add('delete-button');
                    deleteButton.addEventListener('click', () => {
                        files.splice(index, 1);
                        imageBox.remove();
                        updateImagePreviews(); // Update previews after deletion
                    });
                    imageBox.appendChild(deleteButton);
                    productImagePreview.appendChild(imageBox);

                    imgElement.addEventListener('click', () => {
                        cropperImage.src = e.target.result;
                        cropperModal.style.display = 'flex';
                        cropper = new Cropper(cropperImage, {
                            aspectRatio: 0,
                            viewMode: 0,
                            autoCropArea: 1
                        });
                        currentFileIndex = index;
                        console.log('Current file index set to:', currentFileIndex); // Log current file index
                    });
                };
                reader.readAsDataURL(file);
            });
        }

        addProductForm.addEventListener('submit', (e) => {
            if (files.length === 0) {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Please upload at least one image",
                });
                e.preventDefault();
            } else {
                const formData = new FormData(addProductForm);
                files.forEach(file => {
                    formData.append('productImages', file);
                });
                e.preventDefault();
                // Perform the form submission using AJAX or other method
            }
        });
    </script>