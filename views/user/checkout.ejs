<style>
    .main-checkout {
        color: #fefeeb;
        display: flex;
        gap: 5rem;
        justify-content: center;
    }

    .checkout-icons {
        display: flex;
        justify-content: space-around;
    }

    /* ----------------------------- Shipping Address ------------------------------ */

    .shipping-address-container {
        background-color: #232323;
        color: #fefeeb;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        max-width: 800px;
        width: 100%;
    }

    .shipping-head {
        display: flex;
        justify-content: space-between;
    }

    .shipping-address-container h2 {
        margin-bottom: 20px;
        color: #fefeeb;
    }

    .add-address-btn {
        background-color: transparent;
        border: none;
        color: #DB4444;
        cursor: pointer;
        margin-bottom: 20px;
    }

    .address-cards {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .address-card {
        background-color: #232323;
        color: #fefeeb;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        width: calc(33.333% - 10px);
        box-sizing: border-box;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
    }

    .address-card.selected {
        border: 2px solid #DB4444;
    }

    .address-info {
        max-width: 80%;
    }

    .address-info h3 {
        margin: 0 0 5px;
    }

    .address-info p {
        margin: 0;
        color: #fefeeb;
        font-size: 14px;
    }

    .address-options button {
        background-color: transparent;
        border: none;
        cursor: pointer;
        font-size: 18px;
        color: #fefeeb;
    }

    @media (max-width: 768px) {
        .address-card {
            width: calc(50% - 10px);
        }
    }

    @media (max-width: 480px) {
        .address-card {
            width: 100%;
        }
    }

    /* ----------------------------- billing info ------------------------------ */

    .form-control {
        background: transparent;
        color: #fefeeb;
    }

    .form-control:focus {
        background: transparent;
        color: #fefeeb;
    }

    .billing-info-container {
        background-color: #232323;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        max-width: 800px;
        width: 100%;
    }

    .header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .icon {
        font-size: 30px;
        background-color: #DB4444;
        color: #fefeeb;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-right: 10px;
    }

    .title h2 {
        margin: 0;
        color: #fefeeb;
    }

    .title p {
        margin: 0;
        color: #fefeeb;
    }

    .billing-form {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .form-group {
        flex: 1;
        min-width: 200px;
        display: flex;
        flex-direction: column;
    }

    .full-width {
        flex: 1 1 100%;
    }

    label {
        margin-bottom: 5px;
        color: #fefeeb;
    }

    input,
    select,
    textarea {
        padding: 10px;
        background: transparent;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 14px;
        width: 100%;
        box-sizing: border-box;
    }

    textarea {
        resize: vertical;
    }

    @media (max-width: 600px) {
        .form-group {
            min-width: 100%;
        }
    }

    /*------------------------------- payment option ----------------------------*/

    .payment-methods {
        background: #232323;
        border-radius: 10px;
        padding: 20px;
        max-width: 800px;
    }

    .payment-method {
        margin: 2rem 0rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 150px;
        padding: 10px;
        border: 2px solid transparent;
        border-radius: 8px;
        transition: border-color 0.3s ease;
        cursor: pointer;
    }

    .payment-method:hover {
        border-color: #007bff;
    }

    .payment-options {
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .payment-method img {
        width: 40px;
        height: 40px;
        margin: 10px;
    }

    .payment-method.selected {
        border-color: #007bff;
    }

    @media (max-width: 768px) {
        .payment-methods {
            flex-direction: column;
        }

        .payment-method {
            margin-bottom: 10px;
            width: 100%;
            text-align: center;
        }
    }

    /*------------------------- order summary ------------------------------*/

    .card {
        background: #232323;
    }

    .order-tr th {
        background: transparent;
        color: #fefeeb;
    }

    .checkout-button {
        display: flex;
        justify-content: center;
        gap: 2rem;
    }

    /*------------------------- add address modal ------------------------*/

    .modal-content {
        background-color: #232323;
        color: #fefeeb;
    }

    .form-control,
    .dataTable-input {
        display: block;
        width: 100%;
        padding: 0.875rem 1.125rem;
        font-size: 0.875rem;
        font-weight: 400;
        line-height: 1;
        color: #69707a;
        background-color: transparent;
        background-clip: padding-box;
        border: 1px solid #c5ccd6;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: 0.35rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    ::placeholder {
        color: #fefeeb;
    }

    .checkout-icons {
        margin-top: 1.5rem;
    }

    /*-------------------------------- coupon style --------------------*/
    .coupon {
        text-align: center;
        background: #232323;
        margin-bottom: 1.5rem;
        border-radius: 5px;
    }

    .coupon form {
        padding: 1rem;
    }

    .input-coupon {
        color: #fefeeb;
        height: 3rem;
    }

    .coupon-btn {
        margin: 1rem;
    }

    .coupon-icon {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 2rem;
    }

    .bi-gift {
        font-size: 3rem;
    }
</style>

<%- include('navbar') %>

    <div class="container mt-5 mb-5 main-checkout">
        <div>
            <!----------------------------- Shipping Address ------------------------------>
            <div class="shipping-address-container mb-4">
                <div class="shipping-head">
                    <h2>Shipping Address</h2>
                    <div class="pen-option text-right">
                        <% if (userDetails.address.length < 3) { %>
                            <a href="#" id="add-address-btn" data-bs-toggle="modal" data-bs-target="#addressModal"
                                title="Add New Address" class="btn btn-danger">
                                Add Address
                            </a>
                            <% } else { %>
                                <span class="">Maximum 3 address</span>
                                <% } %>
                                    <div class="checkout-icons">
                                        <a href="/profile" title="Edit Address">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a href="/profile" title="Delete Address">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    </div>
                    </div>
                </div>
                <div class="address-cards">
                    <% if (!userDetails.address || userDetails.address.length===0) { %>
                        <p class="mt-5">No Address Found. Please add an Address.</p>
                        <% } else { %>
                            <% userDetails.address.forEach((address, index)=> { %>
                                <div class="address-card" onclick="selectAddress(this, '<%= index %>')">
                                    <div class="address-info">
                                        <h3>
                                            <%= address.building %>,
                                        </h3>
                                        <p>
                                            <%= address.phonenumber %>
                                        </p>
                                        <p>
                                            <%= address.city %> , <%= address.state %> , <%= address.country %>
                                        </p>
                                        <p>
                                            <%= address.pincode %>
                                        </p>
                                    </div>
                                </div>
                                <% }) %>
                                    <% } %>
                </div>
            </div>
            <!----------------------------- billing info ------------------------------>
            <div class="billing-info-container">
                <div class="header">
                    <div class="icon">ðŸ“„</div>
                    <div class="title">
                        <h2>Billing Info</h2>
                    </div>
                </div>
                <div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="mb-3">
                                <label class="form-label" for="billing-name">Name</label>
                                <input type="text" class="form-control" name="customer_name" placeholder="Enter name"
                                    value="<%=user.name %>">
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-3">
                                <label class="form-label" for="billing-email-address">Email Address</label>
                                <input type="email" class="form-control" name="customer_email" placeholder="Enter email"
                                    value="<%=user.email%>" readonly>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-3">
                                <label class="form-label" for="billing-phone">Phone</label>
                                <input type="text" class="form-control" name="phonenumber" placeholder="Enter Phone no."
                                    value="<%=user.phone%>">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!---------------------------- Payment Options ------------------------------->
            <div class="payment-methods mt-4">
                <h2>Payment method :</h2>
                <div class="payment-options">
                    <div class="payment-method" onclick="selectPaymentMethod(this, 0)">
                        <i class="bi bi-cash" style="font-size: 2rem;"></i>
                        <span>Cash on Delivery</span>
                    </div>
                    <div class="payment-method" onclick="selectPaymentMethod(this, 1)">
                        <i class="bi bi-wallet-fill" style="font-size: 2rem;"></i>
                        <span>Wallet</span>
                        <span>Balance : <%= wallet.balance %></span>
                    </div>
                    <div class="payment-method" onclick="selectPaymentMethod(this, 2)">
                        <i class="bi bi-paypal" style="font-size: 2rem;"></i>
                        <span>Razorpay</span>
                    </div>
                </div>
            </div>
        </div>
        <!----------------------------- Order Summary ------------------------------>
        <div class="order-summary" style="width: 45%;">

            <!-------------- coupon management ---------------->
            <div class="coupon">
                <form class="cart-form">
                    <div class="coupon-icon">
                        <i class="bi bi-gift"></i>
                        <h3>Apply Coupon</h3>
                    </div>
                    <div class="d-flex gap-2 m-2 align-items-center">
                        <input type="text" id="couponCode" class="input-coupon" name="couponCode"
                            placeholder="Enter coupon code">
                        <button type="button" id="applyCouponBtn" onclick="applyCoupon()"
                            class="btn submit-btn">Apply</button>
                    </div>
                </form>
                <div id="couponBadge" class="pb-3" style="display: none;">
                    <span class="text-success">Coupon Applied: <span id="appliedCouponCode"></span></span>
                    <button type="button" class="btn btn-danger btn-sm ms-2" onclick="removeCoupon()">Remove</button>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h5 class="font-size-16 mb-0" style="color: #fefeeb;">Order Summary</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table mb-0">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Discount</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if(cartDetails) { %>
                                    <% cartDetails.items.forEach((product, index)=> { %>
                                        <tr>
                                            <td>
                                                <%= product.productId.productName %> x <%= product.productCount %>
                                            </td>
                                            <td>
                                                <%= product.productPrice %>
                                            </td>
                                            <td>
                                                <%= product.productId.productDiscount %>
                                            </td>
                                            <td>
                                                <%= product.productPrice - product.productPrice *
                                                    (product.productId.productDiscount / 100) %>
                                            </td>
                                        </tr>
                                        <% }) %>
                                            <% } %>
                            </tbody>
                            <thead>
                                <tr>
                                    <th>Sub total</th>
                                    <th></th>
                                    <th></th>
                                    <th>
                                        <%= Math.round(cartDetails.payableAmount - cartDetails.payableAmount * (12 /
                                            100)) %>
                                    </th>
                                </tr>
                                <tr>
                                    <th>GST</th>
                                    <th></th>
                                    <th>12%</th>
                                    <th>
                                        <%= Math.round(cartDetails.payableAmount * (12 / 100)) %>
                                    </th>
                                </tr>
                                <tr>
                                    <th>Coupon</th>
                                    <th></th>
                                    <th></th>
                                    <th>
                                        0
                                    </th>
                                </tr>
                                <tr>
                                    <th>Total</th>
                                    <th></th>
                                    <th></th>
                                    <th>
                                        <%= cartDetails.payableAmount %>
                                    </th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div class="mt-4">
                        <div class="mt-3 checkout-button">
                            <a href=/cart><button class="btn submit-btn-light">Cancel</button></a>
                            <form action="" method="post" id="place-order-form">
                                <button type="submit" class="btn btn-danger"
                                    data-amount="<%=cartDetails.payableAmount%>" data-username="<%= user.name %>"
                                    data-mail="<%= user.email %>" data-phone="<%= user.phone %>"
                                    id="place-order-btn">Place
                                    order</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!---------------------------------- Address adding modal box ---------------------------------------->

    <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Add New Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form method="post" id="checkAddress" action="/checkout-address">
                        <div class="form-group mb-2">
                            <label for="building">Flat, House no., Building, Company, Apartment</label>
                            <input type="text" name="building" class="form-control" id="building"
                                placeholder="Enter your address" required>
                        </div>
                        <div class="form-group mb-2">
                            <label for="street">Area, Street, Sector, Village</label>
                            <input type="text" name="street" class="form-control" id="street"
                                placeholder="Enter your Area" required>
                        </div>
                        <div class="form-group mb-2">
                            <label for="city">Town/City</label>
                            <input type="text" name="city" class="form-control" id="city" placeholder="Enter your City"
                                required>
                        </div>
                        <div class="row mb-2">
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="phonenumber">Phone Number</label>
                                    <input type="text" name="phonenumber" class="form-control" id="phonenumber"
                                        placeholder="Contact Number" required>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="pincode">Pincode</label>
                                    <input type="text" name="pincode" class="form-control" id="pincode"
                                        placeholder="Enter your Pincode" required>
                                </div>
                            </div>
                        </div>
                        <div class="form-group mb-2">
                            <label for="landmark">Land Mark</label>
                            <input type="text" name="landmark" class="form-control" id="landmark"
                                placeholder="Enter Nearest Landmark" required>
                        </div>
                        <div class="row mb-2">
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="state">State</label>
                                    <input type="text" name="state" class="form-control" id="state"
                                        placeholder="Enter your state" required>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="country">Country</label>
                                    <input type="text" name="country" class="form-control" id="country"
                                        placeholder="Enter your Country" required>
                                </div>
                            </div>
                        </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary close-btn" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger">Save</button>
                </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        //------------------------- selecting one item -------------------------
        let selectedAddressIndex = null;
        let selectedPaymentMethod = null;

        const orderPlacementBtn = document.getElementById('place-order-btn');
        const totalAmount = orderPlacementBtn.getAttribute('data-amount');
        const username = orderPlacementBtn.getAttribute('data-username');
        const email = orderPlacementBtn.getAttribute('data-email');
        const phone = orderPlacementBtn.getAttribute('data-phone');

        function selectAddress(element, index) {
            const cards = document.querySelectorAll('.address-card');
            cards.forEach(card => card.classList.remove('selected'));
            element.classList.add('selected');
            selectedAddressIndex = index;
        }
        function selectPaymentMethod(element, method) {
            const methods = document.querySelectorAll('.payment-method');
            methods.forEach(methodElement => methodElement.classList.remove('selected'));
            element.classList.add('selected');
            selectedPaymentMethod = method;
        }
        orderPlacementBtn.addEventListener('click', (e) => {
            e.preventDefault();
            if (selectedAddressIndex === null) {
                Swal.fire({
                    icon: "warning",
                    title: "Please select a shipping address.",
                    text: "Select one"
                });
                return;
            }
            if (selectedPaymentMethod === null) {
                Swal.fire({
                    icon: "warning",
                    title: "Please select a payment method.",
                    text: "Select one"
                });
                return;
            }
            if (selectedPaymentMethod === 2) {
                openRazorpayPayment();
            } else {
                placeOrder(selectedAddressIndex, selectedPaymentMethod);
            }
        });

        function openRazorpayPayment() {
            const URL = `/payment-render/${totalAmount}`;
            fetch(URL, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(res => {
                    if (!res.ok) {
                        throw new Error("Cannot render the payment page");
                    }
                    return res.json();
                })
                .then(data => {
                    if (data.orderID) {
                        const options = {
                            key: "rzp_test_jyh8u3FB51sm3I",
                            amount: totalAmount * 100,
                            currency: "INR",
                            name: "Wuzzy's Toys",
                            order_id: data.orderID,
                            handler: function (response) {
                                const URL = `/place-order/${selectedAddressIndex}/${selectedPaymentMethod}`;
                                fetch(URL, {
                                    method: "POST",
                                    headers: {
                                        'Content-Type': "application/json"
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature
                                    })
                                })
                                    .then((res) => {
                                        if (res.redirected)
                                            window.location.href = res.url
                                        if (!res.ok) {
                                            throw new Error("Order placement failed");
                                        }
                                        return res.json();
                                    }).then(data => {
                                        if (data.success) {
                                            window.location.href = "/conform-order";
                                        } else {
                                            Swal.fire({
                                                icon: "error",
                                                title: "Order Placement Failed",
                                                text: data.message
                                            });
                                        }
                                    })
                                    .catch(err => {
                                        console.error("Error on Razorpay payment callback:", err);
                                        Swal.fire({
                                            icon: "error",
                                            title: "Error",
                                            text: "An error occurred while processing the order."
                                        });
                                    });
                            },
                            prefill: {
                                name: username,
                                email: email,
                                contact: phone
                            },
                            notes: {
                                address: "Razorpay Corporate Office"
                            },
                            theme: {
                                color: "#6351CE"
                            }
                        };
                        const rzp1 = new Razorpay(options);
                        rzp1.open();
                    } else {
                        throw new Error("Order ID not received");
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: "error",
                        title: "Error on loading payment method",
                        text: error.message
                    });
                    console.error("Error during payment initiation:", error);
                });
        }
        function placeOrder(addressIndex, paymentMethod) {
            const URL = `/place-order/${addressIndex}/${paymentMethod}`;
            fetch(URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    addressIndex: addressIndex,
                    paymentMode: paymentMethod
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = "/conform-order";
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Order Placement Failed",
                            text: data.message,
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Placement Failed',
                        text: error.message,
                    });
                });
        }
        //-------------------------- coupon managemnet --------------------------------
        async function applyCoupon() {
            const couponCode = document.getElementById('couponCode').value.trim();

            if (!couponCode) {
                showError("Please enter a coupon code.");
                return;
            }

            try {
                const res = await fetch('/applycoupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ couponCode })
                });

                if (!res.ok) {
                    const error = await res.json();
                    showError(error.error || "An error occurred while applying the coupon.");
                    return;
                }

                const couponData = await res.json();
                showCouponBadge(couponCode);
            } catch (error) {
                document.getElementById('couponCode').value = '';
                showError("An error occurred while applying the coupon.");
                console.log(`apply coupon error ${error}`);
            }
        }

        function showCouponBadge(couponCode) {
            const couponBadge = document.getElementById('couponBadge');
            const appliedCouponCode = document.getElementById('appliedCouponCode');
            couponBadge.style.display = 'block';
            appliedCouponCode.innerText = couponCode;
        }

        function removeCoupon() {
            document.getElementById('couponCode').value = '';
            document.getElementById('couponBadge').style.display = 'none';
            location.reload();
        }

        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: message
            });
        }
        //------------------ Validation for the add address modal --------------------

        document.addEventListener('DOMContentLoaded', (event) => {
            const checkAddress = document.getElementById('checkAddress');
            const building = document.getElementsByName('building')[0];
            const street = document.getElementsByName('street')[0];
            const city = document.getElementsByName('city')[0];
            const phone = document.getElementsByName('phonenumber')[0];
            const pincode = document.getElementsByName('pincode')[0];
            const landmark = document.getElementsByName('landmark')[0];
            const state = document.getElementsByName('state')[0];
            const country = document.getElementsByName('country')[0];

            function validatePhone(phone) {
                const phoneRe = /^\d{10}$/;
                return phoneRe.test(phone);
            }
            function validatePincode(pincode) {
                const pincodeRe = /^\d{6}$/;
                return pincodeRe.test(pincode);
            }
            checkAddress.addEventListener('submit', (e) => {
                e.preventDefault();
                if (building.value.trim() === "" || !isNaN(building.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Building field must not be empty and Not a Number.",
                        icon: "error"
                    });
                } else if (building.value.length > 25 || building.value.length < 4) {
                    Swal.fire({
                        title: "Error",
                        text: "Building field must be Greater than 4 letters and less than 25 letters.",
                        icon: "error"
                    });
                } else if (street.value.trim() === "" || !isNaN(street.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Street field must not be empty and Not a Number.",
                        icon: "error"
                    });
                } else if (street.value.length > 25 || street.value.length < 4) {
                    Swal.fire({
                        title: "Error",
                        text: "Street Field Must be Greater than 4 Letters and less than 25 letters.",
                        icon: "error"
                    });
                } else if (city.value.trim() === "" || !isNaN(city.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "City field must not be empty and Not a Number.",
                        icon: "error"
                    });
                } else if (city.value.length > 25 || city.value.length < 4) {
                    Swal.fire({
                        title: "Error",
                        text: "City field must be Greater than 4 Words and less than 25 Words.",
                        icon: "error"
                    });
                } else if (!validatePhone(phone.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Phone number must be 10 digits.",
                        icon: "error"
                    });
                } else if (!validatePincode(pincode.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Pincode must be 6 digits.",
                        icon: "error"
                    });
                } else if (landmark.value.trim() === "" || !isNaN(landmark.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Landmark field must not be empty.",
                        icon: "error"
                    });
                } else if (state.value.trim() === "" || !isNaN(state.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "State field must not be empty.",
                        icon: "error"
                    });
                } else if (country.value.trim() === "" || !isNaN(country.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Country field must not be empty.",
                        icon: "error"
                    });
                } else {
                    checkAddress.submit();
                }
            });
        });

    </script>